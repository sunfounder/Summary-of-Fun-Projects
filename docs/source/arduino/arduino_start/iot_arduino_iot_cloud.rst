.. _iot_arduino_cloud:

1.4 Arduino IoT Cloud
===========================

This example demonstrates code for communicating with the Arduino IoT Cloud. Its purpose is to connect to the Arduino IoT Cloud and interact with cloud variables. Here, we send the temperature values read from the DHT11 sensor to the Arduino IoT Cloud, allowing us to monitor it from the cloud.

.. image:: img/02_cloud.png

**Wiring**

.. image:: img/02_arduino_iot_cloud_bb.png
    :width: 90%
    :align: center

.. raw:: html
    
    <br/>


**Schematic**

.. image:: img/02_arduino_iot_cloud_schematic.png
  :width: 40%
  :align: center


**Install Arduino Create Agent**

1. Visit the address https://create.arduino.cc/getting-started/plugin/welcome.

2. Click START.

  .. image:: img/02_install_agent_2.png
     :width: 95%

3. Choose the version that suits your computer, and it will download an installation package.

  .. image:: img/02_install_agent_3.png
     :width: 95%

4. Install the agent.

  .. image:: img/02_install_agent_4.png
    :width: 85%

5. After installation, go back to your browser, and you will see the following interface.

  .. image:: img/02_install_agent_5.png
     :width: 95%

6. Click NEXT, and then you can GO TO the web editor.

  .. image:: img/02_install_agent_6.png
     :width: 95%

**Using Arduino IoT Cloud**

1. First, you need to log in or register with Arduino. 

  https://login.arduino.cc/login

2. Once logged in, click on IoT Cloud in the upper right corner.

   .. image:: img/02_iot_cloud_2.png


3. Create a new thing.

   .. image:: img/02_iot_cloud_3.png
  
4. Associate your device.

   .. image:: img/02_iot_cloud_4.png


5. Set up a new device.

   .. image:: img/02_iot_cloud_5.png


6. Choose your Arduino board.
 
   .. image:: img/02_iot_cloud_6.png


7. Wait for a moment, and your UNO R4 WiFi will be detected. Continue by clicking configure.
 
   .. image:: img/02_iot_cloud_7.png

 
8. Give your device a name.

  .. image:: img/02_iot_cloud_8.png


9. Make your device IoT-ready, and remember to save the secret key.

  .. image:: img/02_iot_cloud_9.png


10. Wait for a few minutes.

  .. image:: img/02_iot_cloud_10.png


.. 5. Select Arduino UNO R4 WiFi.

.. .. image:: img/sp231016_164654.png

11. Configure WiFi.

  .. image:: img/02_iot_cloud_11.png


12. Here you will need to enter your WiFi password and secret key.

  .. image:: img/02_iot_cloud_12.png


13. Add a variable.

  .. image:: img/02_iot_cloud_13.png


14. Here, we want to display the temperature in IoT Cloud, so we configure a read-only float variable.

  .. image:: img/02_iot_cloud_14.png


15. After completion, go to the sketch.

  .. image:: img/02_iot_cloud_15.png


16. Open the full editor.

  .. image:: img/02_iot_cloud_16.png


17. Click on Libraries on the right side, then Library Manager.

  .. image:: img/02_iot_cloud_17.png


18. Search for the DHT sensor library and check it.

  .. image:: img/02_iot_cloud_18.png


19. Now, we need to edit the code. You can see that the editor has already prepared the IoT Cloud-related code for you. You just need to add the specific functionality you need. In this example, we added code to read the temperature using the DHT11 sensor.

  .. code-block::
      :emphasize-lines: 1,2,3,22,23,24,32,55,56
  
      // DHT sensor library - Version: Latest 
      #include <DHT.h>
      #include <DHT_U.h>
  
      /* 
      Sketch generated by the Arduino IoT Cloud Thing "Untitled"
      https://create.arduino.cc/cloud/things/260edac8-34f9-4e2e-9214-ba0c20994220 
  
      Arduino IoT Cloud Variables description
  
      The following variables are automatically generated and updated when changes are made to the Thing
  
      float temperature;
  
      Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
      which are called when their values are changed from the Dashboard.
      These functions are generated with the Thing and added at the end of this sketch.
      */
  
      #include "thingProperties.h"
  
      #define DHTPIN 11     
      #define DHTTYPE DHT11 
      DHT dht(DHTPIN, DHTTYPE);
  
      void setup() {
          // Initialize serial and wait for port to open:
          Serial.begin(9600);
          // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
          delay(1500); 
  
          dht.begin();
  
          // Defined in thingProperties.h
          initProperties();
  
          // Connect to Arduino IoT Cloud
          ArduinoCloud.begin(ArduinoIoTPreferredConnection);
          
          /*
              The following function allows you to obtain more information
              related to the state of network and IoT Cloud connection and errors
              the higher number the more granular information youâ€™ll get.
              The default is 0 (only errors).
              Maximum is 4
          */
          setDebugMessageLevel(2);
          ArduinoCloud.printDebugInfo();
      }
  
      void loop() {
          ArduinoCloud.update();
          // Your code here 
          
          float temp = dht.readTemperature();  
          temperature = temp;
          
      }
 
20. Upload the code. You may be prompted to update; follow the prompts to complete.

  .. image:: img/02_iot_cloud_20.png


21. Return to IoT CLOUD.

  .. image:: img/02_iot_cloud_21.png


22. Click on the menu in the top left corner.
  
  .. image:: img/02_iot_cloud_22.png


23. Click on the dashboard.
  
  .. image:: img/02_iot_cloud_23.png


24. Create dashboard.
  
  .. image:: img/02_iot_cloud_24.png


25. There are many widgets available; here, we choose a value widget for displaying the temperature.

  .. image:: img/02_iot_cloud_25.png


26. After clicking, a widget settings interface will appear, where you can connect the widget to the cloud variable you created earlier.

  .. image:: img/02_iot_cloud_26.png


27. Now, you can view the sensor readings on Arduino IoT Cloud.

  .. image:: img/02_iot_cloud_27.png


**How it works?**

After configuring the IoT Cloud (device setup, network setup, creating cloud variables), you will notice that the sketch on the cloud updates automatically. So, most of the code is already written for you.

Open the editor, and you will see that this sketch contains four files:

``main.ino``: Used to initialize the Arduino and perform the main loop tasks. Additionally, it includes logic for connecting and communicating with the Arduino IoT Cloud.

``thingProperties.h``: This file is used to define variables and functions in the Arduino IoT Cloud. It contains declarations of cloud variables and their associated callback functions. In the provided code, it is used to initialize cloud properties (e.g., the temperature variable) and connect to the Arduino IoT Cloud.

``Secret``: Used to store sensitive or private information, such as WiFi passwords or API keys. This sensitive information is typically not exposed directly in the code but is stored in the Secret file to enhance security.

``ReadMe.adoc``: Contains project documentation or other relevant information for easier understanding and use of the project. This file usually does not contain executable code but rather documents and descriptive information.

We need to add some code for the DHT11 sensor. This code is identical to what you would use on your local IDE. The only difference is that you need to assign the value read from the DHT11 to the cloud variable ``temperature``.

(Note: You should never modify ``thingProperties.h`` and ``Secret``. They will be modified when you make changes using the Thing editor.)
